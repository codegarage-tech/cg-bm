apply plugin: 'com.android.application'

android {
    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'keydata.keystore'
                keyPassword KEY_PASSWORD
                storeFile file('../misc/keydata.keystore')
                storePassword STORE_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEY_PASSWORD and STORE_PASSWORD in gradle.properties.")
            }
        }
    }

    defaultConfig {
        applicationId "com.rc.buyermarket"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //Flavor definition
    flavorDimensions "appType"
    productFlavors {
        pro {
            dimension "appType"
        }
    }

    //Format output
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            println variant

            //Rename the output apk file
            def appName = "Buyer Market"
            def underScore = "_"
            def flavor = variant.baseName.split("-")[0]
            def version = variant.versionName
            def buildType = variant.buildType.name
            def releaseApkName = appName + underScore + convertToCamelCase(flavor) + underScore + version + underScore + convertToCamelCase(buildType) + ".apk"
            outputFileName = releaseApkName

            // set new resVale
            variant.resValue 'string', 'app_name', appName
        }
    }
}

def static String convertToCamelCase(String str) {
    if (str == null) {
        return null
    }

    boolean space = true
    StringBuilder builder = new StringBuilder(str)
    final int len = builder.length()

    for (int i = 0; i < len; ++i) {
        char c = builder.charAt(i)
        if (space) {
            if (!Character.isWhitespace(c)) {
                // Convert to title case and switch out of whitespace mode.
                builder.setCharAt(i, Character.toTitleCase(c))
                space = false
            }
        } else if (Character.isWhitespace(c)) {
            space = true
        } else {
            builder.setCharAt(i, Character.toLowerCase(c))
        }
    }

    return builder.toString()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:multidex:$multiDexVersion"
    //Image loading
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    //Retrofit for server communication
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.google.guava:guava:24.1-android'

    //Stripe
    implementation "com.stripe:stripe-android:$stripeAndroidVersion"
    implementation "com.stripe:stripe-java:$stripeJavaVersion"

    implementation project(":easyrecyclerview")
    implementation project(":pdialog")
}
